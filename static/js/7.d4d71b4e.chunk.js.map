{"version":3,"sources":["Components/ColumnMiddle/EmojiPickerButton.js"],"names":["EmojiPickerButton","props","onClientUpdateChange","update","picker","handleButtonMouseEnter","event","buttonEnter","setTimeout","updatePicker","loadStickerSets","EMOJI_PICKER_TIMEOUT_MS","a","sets","TdLibController","send","is_attached","recent","is_masks","stickerSets","promises","forEach","x","push","set_id","id","Promise","all","node","stickersPickerRef","current","store","FileStore","getStore","loadRecentStickersContent","slice","reverse","loadStickerSetContent","loadedSets","set","reduce","stickers","length","loadStickerThumbnailContent","handleButtonMouseLeave","tryClosePicker","sticker","state","paperEnter","handlePaperMouseEnter","handlePaperMouseLeave","open","setState","handleEmojiClick","tab","handleStickersClick","stickersPicker","loadContent","scrollTop","handleStickerSend","clientUpdate","handleStickerPreview","emojiPickerRef","React","createRef","ApplicationStore","on","this","LocalizationStore","off","theme","t","i18n","search","notfound","skintext","categories","people","nature","foods","activity","places","objects","symbols","flags","custom","ref","showPreview","showSkinTones","onSelect","color","palette","primary","dark","native","isAppleDevice","style","width","overflowX","onPreview","rel","type","href","className","aria-label","onMouseEnter","onMouseLeave","classNames","onClick","Boolean","Component","enhance","compose","withTranslation","withTheme"],"mappings":"mYA6BMA,G,mBACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAqBVC,qBAAuB,SAAAC,GACnB,EAAKC,OAAS,MAvBC,EA0BnBC,uBAAyB,SAAAC,GACrB,EAAKC,aAAc,EACnBC,WAAW,WACF,EAAKD,cAEV,EAAKE,cAAa,GAClB,EAAKC,oBACNC,MAjCY,EAoCnBD,gBApCmB,qBAoCD,gCAAAE,EAAA,yDACV,EAAKC,KADK,iEAGMC,IAAgBC,KAAK,CACrC,QAAS,oBACTC,aAAa,IALH,cAGd,EAAKC,OAHS,gBAQWH,IAAgBC,KAAK,CAC1C,QAAS,0BACTG,UAAU,IAVA,cAQd,EAAKC,YARS,OAaRC,EAAW,GACjB,EAAKD,YAAYN,KAAKQ,QAAQ,SAAAC,GAC1BF,EAASG,KACLT,IAAgBC,KAAK,CACjB,QAAS,gBACTS,OAAQF,EAAEG,QAlBR,UAuBIC,QAAQC,IAAIP,GAvBhB,QAuBd,EAAKP,KAvBS,OAyBRe,EAAO,EAAKC,kBAAkBC,QAE9BC,EAAQC,IAAUC,WACxBC,YAA0BH,EAAO,EAAKd,QAElB,EAAKJ,KAAKsB,MAAM,EAAG,GAAGC,UAC9Bf,QAAQ,SAAAC,GAChBe,YAAsBN,EAAOT,GAC7BM,EAAKU,WAAWC,IAAIjB,EAAEG,GAAIH,EAAEG,MAGR,EAAKZ,KAAK2B,OAAO,SAACC,EAAUF,GAIhD,OAHIA,EAAIE,SAASC,OAAS,GACtBD,EAASlB,KAAKgB,EAAIE,SAAS,IAExBA,GACR,IACapB,QAAQ,SAAAC,GACpBqB,YAA4BZ,EAAOT,KA3CzB,0CApCC,EAmFnBsB,uBAAyB,WACrB,EAAKrC,aAAc,EACnBC,WAAW,WACP,EAAKqC,kBACNlC,MAvFY,EA0FnBkC,eAAiB,WAAO,IACZC,EAAY,EAAKC,MAAjBD,QACJ,EAAKE,YAAc,EAAKzC,aAAeuC,GAE3C,EAAKrC,cAAa,IA9FH,EAiGnBwC,sBAAwB,WACpB,EAAKD,YAAa,GAlGH,EAqGnBE,sBAAwB,WAGpB,EAAKF,YAAa,EAClBxC,WAAW,WACP,EAAKqC,kBACNlC,MA3GY,EA8GnBF,aAAe,SAAA0C,GACX,EAAKC,SAAS,CAAED,UA/GD,EAkHnBE,iBAAmB,WACf,EAAKD,SAAS,CAAEE,IAAK,KAnHN,EAsHnBC,oBAAsB,WAClB,IAAMC,EAAiB,EAAK3B,kBAAkBC,QACtCwB,EAAQ,EAAKP,MAAbO,IAERE,EAAeC,YAAY,EAAKxC,OAAQ,EAAKE,YAAa,EAAKN,MAE/D,EAAKuC,SAAS,CAAEE,IAAK,IACT,IAARA,GACAE,EAAeE,aA9HJ,EAkInBC,kBAAoB,SAAAb,GACXA,IAELhC,IAAgB8C,aAAa,CACzB,QAAS,0BACTd,YAGJ,EAAKrC,cAAa,KA1IH,EA6InBoD,qBAAuB,SAAAf,GACnB,EAAKM,SAAS,CAAEN,YAChBhC,IAAgB8C,aAAa,CACzB,QAAS,6BACTd,YAGCA,GACD,EAAKD,kBAlJT,EAAKE,MAAQ,CACTI,MAAM,EACNG,IAAK,GAGT,EAAKQ,eAAiBC,IAAMC,YAC5B,EAAKnC,kBAAoBkC,IAAMC,YAThB,E,iFAafC,IAAiBC,GAAG,0BAA2BC,KAAKjE,sBACpDkE,IAAkBF,GAAG,6BAA8BC,KAAKjE,wB,6CAIxD+D,IAAiBI,IAAI,0BAA2BF,KAAKjE,sBACrDkE,IAAkBC,IAAI,6BAA8BF,KAAKjE,wB,+BAsInD,IAAD,EACgBiE,KAAKlE,MAAlBqE,EADH,EACGA,MAAOC,EADV,EACUA,EADV,EAE0BJ,KAAKpB,MAA5BI,EAFH,EAEGA,KAAMG,EAFT,EAESA,IAAKR,EAFd,EAEcA,QAEnB,GAAIK,IAASgB,KAAK/D,OAAQ,CACtB,IAAMoE,EAAO,CACTC,OAAQF,EAAE,UACVG,SAAUH,EAAE,iBACZI,SAAUJ,EAAE,yBACZK,WAAY,CACRH,OAAQF,EAAE,iBACVtD,OAAQsD,EAAE,UACVM,OAAQN,EAAE,iBACVO,OAAQP,EAAE,iBACVQ,MAAOR,EAAE,aACTS,SAAUT,EAAE,YACZU,OAAQV,EAAE,gBACVW,QAASX,EAAE,WACXY,QAASZ,EAAE,WACXa,MAAOb,EAAE,SACTc,OAAQd,EAAE,YAIlBJ,KAAK/D,OACD,kBAAC,IAAD,CACIkF,IAAKnB,KAAKL,eAEVvB,IAAI,QACJgD,aAAa,EACbC,eAAe,EACfC,SAAUtB,KAAKlE,MAAMwF,SACrBC,MAAOpB,EAAMqB,QAAQC,QAAQC,KAC7BrB,KAAMA,EACNsB,OAAQC,cACRC,MAAO,CAAEC,MAAO,IAAKC,UAAW,YAIxC/B,KAAKX,eACD,kBAAC,IAAD,CACI8B,IAAKnB,KAAKtC,kBACV4D,SAAUtB,KAAKR,kBACfwC,UAAWhC,KAAKN,uBAK5B,OACI,oCACI,0BACIuC,IAAI,aACJC,KAAK,WACLC,KAA6B,SAAvBhC,EAAMqB,QAAQU,KAAkB,sBAAwB,yBAElE,kBAAC,IAAD,CACIE,UAAU,uBACVC,aAAW,WACXC,aAActC,KAAK9D,uBACnBqG,aAAcvC,KAAKvB,wBACnB,kBAAC,IAAD,OAEJ,yBACI2D,UAAWI,IAAW,oBAAqB,CAAE,2BAA4BxD,IACzEsD,aAActC,KAAKlB,sBACnByD,aAAcvC,KAAKjB,uBACnB,yBAAKqD,UAAU,uBACX,kBAAC,IAAD,CACIb,MAAe,IAARpC,EAAY,UAAY,UAC/BiD,UAAU,6BACVK,QAASzC,KAAKd,kBACbkB,EAAE,UAEP,kBAAC,IAAD,CACImB,MAAe,IAARpC,EAAY,UAAY,UAC/BiD,UAAU,6BACVK,QAASzC,KAAKZ,qBACbgB,EAAE,cAGX,yBAAKgC,UAAWI,IAAW,uBAAwB,CAAE,gCAAyC,IAARrD,KACjFa,KAAK/D,OACL+D,KAAKX,gBAETqD,QAAQ/D,IAAY,kBAAC,IAAD,CAAgBA,QAASA,U,GA9OlCiB,IAAM+C,YAqPhCC,EAAUC,YACZC,cACAC,KAGWH,YAAQ/G","file":"static/js/7.d4d71b4e.chunk.js","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from '../../Utils/HOC';\nimport withTheme from '@material-ui/core/styles/withTheme';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '../../Assets/Icons/Smile';\nimport { Picker as EmojiPicker } from 'emoji-mart';\n// import { NimblePicker as EmojiPicker } from 'emoji-mart';\n// import data from 'emoji-mart/data/messenger.json'\nimport StickerPreview from './StickerPreview';\nimport StickersPicker from './StickersPicker';\nimport { isAppleDevice } from '../../Utils/Common';\nimport { loadStickerThumbnailContent, loadStickerSetContent, loadRecentStickersContent } from '../../Utils/File';\nimport { EMOJI_PICKER_TIMEOUT_MS } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\n\nclass EmojiPickerButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            tab: 0\n        };\n\n        this.emojiPickerRef = React.createRef();\n        this.stickersPickerRef = React.createRef();\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.off('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.off('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    onClientUpdateChange = update => {\n        this.picker = null;\n    };\n\n    handleButtonMouseEnter = event => {\n        this.buttonEnter = true;\n        setTimeout(() => {\n            if (!this.buttonEnter) return;\n\n            this.updatePicker(true);\n            this.loadStickerSets();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    loadStickerSets = async () => {\n        if (this.sets) return;\n\n        this.recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.stickerSets = await TdLibController.send({\n            '@type': 'getInstalledStickerSets',\n            is_masks: false\n        });\n\n        const promises = [];\n        this.stickerSets.sets.forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        this.sets = await Promise.all(promises);\n\n        const node = this.stickersPickerRef.current;\n\n        const store = FileStore.getStore();\n        loadRecentStickersContent(store, this.recent);\n\n        const previewSets = this.sets.slice(0, 5).reverse();\n        previewSets.forEach(x => {\n            loadStickerSetContent(store, x);\n            node.loadedSets.set(x.id, x.id);\n        });\n\n        const previewStickers = this.sets.reduce((stickers, set) => {\n            if (set.stickers.length > 0) {\n                stickers.push(set.stickers[0]);\n            }\n            return stickers;\n        }, []);\n        previewStickers.forEach(x => {\n            loadStickerThumbnailContent(store, x);\n        });\n    };\n\n    handleButtonMouseLeave = () => {\n        this.buttonEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    tryClosePicker = () => {\n        const { sticker } = this.state;\n        if (this.paperEnter || this.buttonEnter || sticker) return;\n\n        this.updatePicker(false);\n    };\n\n    handlePaperMouseEnter = () => {\n        this.paperEnter = true;\n    };\n\n    handlePaperMouseLeave = () => {\n        // return;\n\n        this.paperEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    updatePicker = open => {\n        this.setState({ open });\n    };\n\n    handleEmojiClick = () => {\n        this.setState({ tab: 0 });\n    };\n\n    handleStickersClick = () => {\n        const stickersPicker = this.stickersPickerRef.current;\n        const { tab } = this.state;\n\n        stickersPicker.loadContent(this.recent, this.stickerSets, this.sets);\n\n        this.setState({ tab: 1 });\n        if (tab === 1) {\n            stickersPicker.scrollTop();\n        }\n    };\n\n    handleStickerSend = sticker => {\n        if (!sticker) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSend',\n            sticker\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleStickerPreview = sticker => {\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n\n        if (!sticker) {\n            this.tryClosePicker();\n        }\n    };\n\n    render() {\n        const { theme, t } = this.props;\n        const { open, tab, sticker } = this.state;\n\n        if (open && !this.picker) {\n            const i18n = {\n                search: t('Search'),\n                notfound: t('NotEmojiFound'),\n                skintext: t('ChooseDefaultSkinTone'),\n                categories: {\n                    search: t('SearchResults'),\n                    recent: t('Recent'),\n                    people: t('SmileysPeople'),\n                    nature: t('AnimalsNature'),\n                    foods: t('FoodDrink'),\n                    activity: t('Activity'),\n                    places: t('TravelPlaces'),\n                    objects: t('Objects'),\n                    symbols: t('Symbols'),\n                    flags: t('Flags'),\n                    custom: t('Custom')\n                }\n            };\n\n            this.picker = (\n                <EmojiPicker\n                    ref={this.emojiPickerRef}\n                    // data={data}\n                    set='apple'\n                    showPreview={false}\n                    showSkinTones={false}\n                    onSelect={this.props.onSelect}\n                    color={theme.palette.primary.dark}\n                    i18n={i18n}\n                    native={isAppleDevice()}\n                    style={{ width: 338, overflowX: 'hidden' }}\n                />\n            );\n\n            this.stickersPicker = (\n                <StickersPicker\n                    ref={this.stickersPickerRef}\n                    onSelect={this.handleStickerSend}\n                    onPreview={this.handleStickerPreview}\n                />\n            );\n        }\n\n        return (\n            <>\n                <link\n                    rel='stylesheet'\n                    type='text/css'\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\n                />\n                <IconButton\n                    className='inputbox-icon-button'\n                    aria-label='Emoticon'\n                    onMouseEnter={this.handleButtonMouseEnter}\n                    onMouseLeave={this.handleButtonMouseLeave}>\n                    <InsertEmoticonIcon />\n                </IconButton>\n                <div\n                    className={classNames('emoji-picker-root', { 'emoji-picker-root-opened': open })}\n                    onMouseEnter={this.handlePaperMouseEnter}\n                    onMouseLeave={this.handlePaperMouseLeave}>\n                    <div className='emoji-picker-header'>\n                        <Button\n                            color={tab === 0 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleEmojiClick}>\n                            {t('Emoji')}\n                        </Button>\n                        <Button\n                            color={tab === 1 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleStickersClick}>\n                            {t('Stickers')}\n                        </Button>\n                    </div>\n                    <div className={classNames('emoji-picker-content', { 'emoji-picker-content-stickers': tab === 1 })}>\n                        {this.picker}\n                        {this.stickersPicker}\n                    </div>\n                    {Boolean(sticker) && <StickerPreview sticker={sticker} />}\n                </div>\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withTranslation(),\n    withTheme\n);\n\nexport default enhance(EmojiPickerButton);\n"],"sourceRoot":""}