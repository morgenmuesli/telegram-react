{"version":3,"sources":["Components/ColumnMiddle/StickerSet.js","Utils/Animatior.js","Components/ColumnMiddle/StickersPickerHeader.js","Components/ColumnMiddle/StickersPicker.js","Components/ColumnMiddle/EmojiPickerButton.js"],"names":["StickerSet","nextProps","nextState","nextContext","this","props","info","theme","classes","onSelect","onMouseDown","onMouseEnter","onDeleteClick","title","items","stickers","map","x","i","className","classNames","stickerSetItem","key","sticker","id","data-sticker-id","onClick","Sticker","autoplay","blur","displaySize","STICKER_SMALL_DISPLAY_SIZE","preview","source","StickerSourceEnum","PICKER","IconButton","aria-label","root","iconRoot","size","fontSize","React","Component","withStyles","backgroundColor","palette","background","paper","color","text","primary","width","height","padding","boxSizing","type","borderRadius","margin","withTheme","Animator","duration","options","start","stopped","requestAnimationFrame","startAnim","timeStamp","end","draw","now","every","to","last","time","Math","min","p","val","outSine","forEach","from","func","stop","cancelAnimationFrame","n","sin","PI","StickersPickerHeader","onClientUpdateStickerSetPosition","update","position","setState","scrollToPosition","state","animator","anchorRef","scroll","scrollRef","current","anchor","anchorNode","ReactDOM","scrollFrom","scrollLeft","scrollTo","anchorFrom","Number","style","left","replace","anchorTo","abs","sign","setTimeout","handleWheel","event","deltaX","deltaY","handleSelect","indexOf","createRef","StickerStore","on","off","prevProps","prevState","snapshot","play","PICKER_HEADER","openMedia","borderColor","ref","onWheel","accentBackgroundDark","borderStyle","accentStyles","StickersPicker","onUpdateInstalledStickerSets","is_masks","sticker_set_ids","filterSets","onUpdateRecentStickers","reloadRecentContent","scrollTop","loadContent","recent","stickerSets","sets","a","TdLibController","send","is_attached","result","promises","push","set_id","Promise","all","slicedSets","slice","headerStickers","reduce","set","length","fullSets","setsLength","loadInViewContentOnScroll","loadInViewContent","loadInViewContentOnScrollEnd","inViewItems","item","itemsMap","get","node","topBorder","bottomBorder","offsetHeight","nodeTop","offsetTop","nodeBottom","clientHeight","store","FileStore","getStore","loadedSets","has","loadStickerSetContent","updatePosition","minDiff","scrollHeight","firstOffsetTop","pos","element","diff","clientUpdate","handleScroll","loadingChunk","loadChunk","finally","concat","loadPreviewContent","stickerId","getStickers","find","loadStickerContent","getNeighborStickersFromSets","handleMouseEnter","currentTarget","dataset","mouseDown","mouseDownStickerId","previewStickerId","onPreview","handleMouseDown","Date","timestamp","showPreview","cancelSend","document","addEventListener","handleMouseUp","preventDefault","stopPropagation","removeEventListener","handleStickerSelect","handleSelectSet","concatSets","handleDeleteRecent","handleDeleteStickerSet","is_installed","Map","debounce","throttle","t","clear","el","recentInfo","onScroll","Boolean","enhance","compose","withSaveRef","withTranslation","withRestoreRef","EmojiPickerButton","onClientUpdateChange","picker","handleButtonMouseEnter","buttonEnter","updatePicker","loadStickerSets","EMOJI_PICKER_TIMEOUT_MS","stickersPickerRef","loadRecentStickersContent","reverse","loadStickerThumbnailContent","handleButtonMouseLeave","tryClosePicker","paperEnter","handlePaperMouseEnter","handlePaperMouseLeave","open","handleEmojiClick","tab","handleStickersClick","stickersPicker","handleStickerSend","handleStickerPreview","emojiPickerRef","ApplicationStore","LocalizationStore","i18n","search","notfound","skintext","categories","people","nature","foods","activity","places","objects","symbols","flags","custom","showSkinTones","dark","native","isAppleDevice","overflowX","rel","href","onMouseLeave","pickerRoot","pickerRootOpened","Button","StickerPreview","zIndex","modal","shape","boxShadow","shadows","bottom","display"],"mappings":"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","file":"static/js/3.9cb7e39b.chunk.js","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport './StickerSet.css';\n\nconst styles = theme => ({\n    title: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.text.primary\n    },\n    stickerSetItem: {\n        width: STICKER_SMALL_DISPLAY_SIZE,\n        height: STICKER_SMALL_DISPLAY_SIZE,\n        padding: 3,\n        boxSizing: 'border-box',\n        '&:hover': {\n            background: theme.palette.type === 'dark' ? '#303030' : '#f4f4f4',\n            borderRadius: 6\n        }\n    },\n    iconRoot: {\n        fontSize: 16,\n        padding: 4,\n        margin: '4px 8px 4px 4px'\n    }\n});\n\nclass StickerSet extends React.Component {\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { info, theme } = this.props;\n\n        if (theme !== nextProps.theme) {\n            return true;\n        }\n\n        if (info !== nextProps.info) {\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        const { classes, info, onSelect, onMouseDown, onMouseEnter, onDeleteClick } = this.props;\n        if (!info) return null;\n\n        const { title, stickers } = info;\n\n        const items = stickers.map((x, i) => (\n            <div\n                className={classNames('sticker-set-item', classes.stickerSetItem)}\n                key={x.sticker.id}\n                data-sticker-id={x.sticker.id}\n                onClick={() => onSelect(x)}\n                onMouseEnter={onMouseEnter}\n                onMouseDown={onMouseDown}>\n                <Sticker\n                    key={x.sticker.id}\n                    sticker={x}\n                    autoplay={false}\n                    blur={false}\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE - 6}\n                    preview\n                    source={StickerSourceEnum.PICKER}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='sticker-set'>\n                <div className={classNames('sticker-set-title', classes.title)}>\n                    <div className='sticker-set-title-wrapper'>\n                        <span>{title}</span>\n                    </div>\n                    {onDeleteClick && (\n                        <IconButton\n                            aria-label='delete'\n                            classes={{ root: classes.iconRoot }}\n                            size='small'\n                            onClick={onDeleteClick}>\n                            <ClearIcon fontSize='inherit' />\n                        </IconButton>\n                    )}\n                </div>\n                <div className='sticker-set-content'>{items}</div>\n            </div>\n        );\n    }\n}\n\nStickerSet.propTypes = {\n    info: PropTypes.object.isRequired,\n    onSelect: PropTypes.func.isRequired,\n    onMouseDown: PropTypes.func.isRequired,\n    onDeleteClick: PropTypes.func\n};\n\nexport default withStyles(styles, { withTheme: true })(StickerSet);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nclass Animator {\n    constructor(duration, options = []) {\n        this.options = options;\n        this.duration = duration;\n    }\n\n    static outSine(n) {\n        return Math.sin((n * Math.PI) / 2);\n    }\n\n    start = () => {\n        this.stopped = false;\n        this.id = requestAnimationFrame(this.startAnim);\n    };\n\n    startAnim = timeStamp => {\n        const { start, duration } = this;\n\n        this.start = timeStamp;\n        this.end = start + duration;\n        this.draw(timeStamp);\n    };\n\n    draw = now => {\n        const { stopped, duration, start, options } = this;\n\n        if (now - start > duration && options.every(x => x.to === x.last)) {\n            this.stopped = true;\n        }\n\n        if (stopped) return;\n\n        const time = Math.min(now - start, duration);\n        const p = duration === 0 ? 1.0 : time / duration;\n        const val = Animator.outSine(p);\n\n        options.forEach(x => {\n            const { from, to, func } = x;\n            x.last = from + (to - from) * val;\n            func(x.last);\n        });\n\n        this.id = requestAnimationFrame(this.draw);\n    };\n\n    stop = () => {\n        this.stopped = true;\n        cancelAnimationFrame(this.id);\n    };\n}\n\nexport default Animator;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Animator from '../../Utils/Animatior';\nimport Sticker from './../Message/Media/Sticker';\nimport { accentStyles, borderStyle } from '../Theme';\nimport { ANIMATION_DURATION_200MS } from '../../Constants';\nimport { StickerSourceEnum } from '../Message/Media/Sticker';\nimport StickerStore from '../../Stores/StickerStore';\nimport './StickersPickerHeader.css';\n\nconst styles = theme => ({\n    ...borderStyle(theme),\n    ...accentStyles(theme)\n});\n\nclass StickersPickerHeader extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { position: 0 };\n\n        this.scrollRef = React.createRef();\n        this.anchorRef = React.createRef();\n    }\n\n    componentDidMount() {\n        StickerStore.on('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    componentWillUnmount() {\n        StickerStore.off('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    onClientUpdateStickerSetPosition = update => {\n        const { position } = update;\n\n        this.setState({ position });\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.position !== this.state.position) {\n            this.scrollToPosition();\n        }\n    }\n\n    scrollToPosition = () => {\n        const { position } = this.state;\n        const { animator, anchorRef, scrollRef } = this;\n\n        const scroll = scrollRef.current;\n        const anchor = anchorRef.current;\n        const anchorNode = ReactDOM.findDOMNode(anchor);\n\n        const scrollFrom = scroll.scrollLeft;\n        const scrollTo = position * 44 - 147;\n\n        const anchorFrom = Number(anchorNode.style.left.replace('px', ''));\n        const anchorTo = position * 44;\n\n        if (animator) {\n            animator.stop();\n        }\n\n        this.animator = new Animator(0, [\n            {\n                from: scrollFrom,\n                to: scrollTo,\n                func: left => (scroll.scrollLeft = left)\n            },\n            {\n                from:\n                    Math.abs(anchorTo - anchorFrom) > 338\n                        ? anchorTo - Math.sign(anchorTo - anchorFrom) * 338\n                        : anchorFrom,\n                to: anchorTo,\n                func: left => (anchorNode.style.left = left + 'px')\n            }\n        ]);\n\n        setTimeout(() => {\n            if (!this.animator) return;\n\n            this.animator.start();\n        }, 0);\n        // this.animator.start();\n    };\n\n    handleWheel = event => {\n        const { scrollRef } = this;\n\n        if (event.deltaX === 0) {\n            const scroll = scrollRef.current;\n\n            scroll.scrollLeft += event.deltaY;\n        }\n    };\n\n    handleSelect = sticker => {\n        const { stickers, onSelect } = this.props;\n\n        onSelect(stickers.indexOf(sticker));\n    };\n\n    render() {\n        const { classes, stickers } = this.props;\n\n        const items = stickers.map(x => (\n            <Sticker\n                key={x.sticker.id}\n                className='stickers-picker-header-sticker'\n                style={{ width: 32, height: 32 }}\n                sticker={x}\n                play={false}\n                autoplay={false}\n                blur={false}\n                displaySize={32}\n                preview\n                source={StickerSourceEnum.PICKER_HEADER}\n                openMedia={() => this.handleSelect(x)}\n            />\n        ));\n\n        return (\n            <div className={classNames('stickers-picker-header', classes.borderColor)}>\n                <div ref={this.scrollRef} className='stickers-picker-header-scroll' onWheel={this.handleWheel}>\n                    <div className='stickers-picker-header-items'>{items}</div>\n                    <div\n                        ref={this.anchorRef}\n                        className={classNames('stickers-picker-header-anchor', classes.accentBackgroundDark)}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPickerHeader.propTypes = {\n    stickers: PropTypes.array.isRequired,\n    onSelect: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(StickersPickerHeader);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { compose } from 'recompose';\nimport { withRestoreRef, withSaveRef } from '../../Utils/HOC';\nimport { withTranslation } from 'react-i18next';\nimport StickerSet from './StickerSet';\nimport StickersPickerHeader from './StickersPickerHeader';\nimport { debounce, throttle } from '../../Utils/Common';\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\nimport { getNeighborStickersFromSets, getStickers } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport StickerStore from '../../Stores/StickerStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickersPicker.css';\n\nclass StickersPicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.itemsMap = new Map();\n        this.loadedSets = new Map();\n\n        this.state = {\n            recent: null,\n            stickerSets: null,\n            sets: [],\n            headerStickers: [],\n            position: 0\n        };\n\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 100);\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 2000);\n        this.updatePosition = throttle(this.updatePosition, 250);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { position, recent, stickerSets, sets, showPreview } = this.state;\n\n        if (nextState.recent !== recent) {\n            return true;\n        }\n\n        if (nextState.stickerSets !== stickerSets) {\n            return true;\n        }\n\n        if (nextState.sets !== sets) {\n            return true;\n        }\n\n        if (nextState.showPreview !== showPreview) {\n            return true;\n        }\n\n        if (nextState.position !== position) {\n            return true;\n        }\n\n        return false;\n    }\n\n    componentDidMount() {\n        StickerStore.on('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.on('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    componentWillUnmount() {\n        StickerStore.off('updateInstalledStickerSets', this.onUpdateInstalledStickerSets);\n        StickerStore.off('updateRecentStickers', this.onUpdateRecentStickers);\n    }\n\n    onUpdateInstalledStickerSets = update => {\n        const { is_masks, sticker_set_ids } = update;\n        if (!is_masks) return;\n\n        this.filterSets();\n    };\n\n    onUpdateRecentStickers = update => {\n        this.reloadRecentContent();\n    };\n\n    filterSets(sticker_set_ids) {\n        const { sets, stickerSets } = this.state;\n    }\n\n    async reloadRecentContent() {\n        const recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.setState({\n            recent\n        });\n    }\n\n    scrollTop = () => {\n        this.scrollRef.current.scrollTop = 0;\n    };\n\n    loadContent = async (recent, stickerSets, sets) => {\n        // console.log('[sp] loadContent', recent, stickerSets, sets);\n\n        if (!recent) {\n            recent = await TdLibController.send({\n                '@type': 'getRecentStickers',\n                is_attached: false\n            });\n        }\n\n        if (!sets) {\n            const result = await TdLibController.send({\n                '@type': 'getInstalledStickerSets',\n                is_masks: false\n            });\n\n            const promises = [];\n            result.sets.forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            sets = await Promise.all(promises);\n        }\n\n        const slicedSets = sets.slice(0, 5);\n        const headerStickers = sets.reduce((preview, set) => {\n            if (set.stickers.length > 0) {\n                preview.push(set.stickers[0]);\n            }\n            return preview;\n        }, []);\n\n        this.setState({\n            recent,\n            stickerSets,\n            sets: slicedSets,\n            fullSets: sets,\n            headerStickers\n        });\n        this.setsLength = slicedSets.length;\n    };\n\n    loadInViewContentOnScroll = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContentOnScrollEnd = () => {\n        this.loadInViewContent(400);\n    };\n\n    loadInViewContent = (padding = 0) => {\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n\n        const inViewItems = [];\n        sets.forEach(x => {\n            const item = this.itemsMap.get(x.id);\n            const node = ReactDOM.findDOMNode(item);\n            if (node) {\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewItems.push(x);\n                }\n            }\n        });\n\n        inViewItems.forEach(x => {\n            const store = FileStore.getStore();\n            if (!this.loadedSets.has(x.id)) {\n                this.loadedSets.set(x.id, x.id);\n                loadStickerSetContent(store, x);\n            }\n        });\n    };\n\n    updatePosition = () => {\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n        let minDiff = scroll.scrollHeight;\n        let position = 0;\n        let firstOffsetTop = 0;\n        sets.forEach((x, pos) => {\n            const element = this.itemsMap.get(x.id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    firstOffsetTop = pos === 0 ? node.offsetTop : firstOffsetTop;\n\n                    const offsetTop = node.offsetTop - firstOffsetTop;\n                    if (node && offsetTop <= scroll.scrollTop) {\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\n                        if (diff <= minDiff) {\n                            minDiff = diff;\n                            position = pos;\n                        }\n                    }\n                }\n            }\n        });\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSetPosition',\n            position\n        });\n    };\n\n    handleScroll = async () => {\n        //this.loadInViewContentOnScroll();\n        this.loadInViewContentOnScrollEnd();\n        this.updatePosition();\n\n        const scroll = this.scrollRef.current;\n\n        if (this.loadingChunk) return;\n\n        let loadChunk = false;\n        if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\n            loadChunk = true;\n        }\n\n        if (!loadChunk) {\n            return false;\n        }\n\n        const { sets, stickerSets } = this.state;\n        if (stickerSets.sets.length === sets.length) return;\n\n        this.loadingChunk = true;\n        const promises = [];\n        stickerSets.sets.slice(this.setsLength, this.setsLength + 5).forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        const result = await Promise.all(promises).finally(() => {\n            this.loadingChunk = false;\n        });\n\n        this.setsLength += result.length;\n        this.setState({ sets: sets.concat(result) });\n    };\n\n    loadPreviewContent = stickerId => {\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        if (!sticker) return;\n\n        const store = FileStore.getStore();\n        loadStickerContent(store, sticker, null);\n\n        const stickersPerRow = 5;\n        const preloadStickers = getNeighborStickersFromSets(sticker, sets, stickersPerRow);\n        preloadStickers.forEach(x => {\n            loadStickerContent(store, x, null);\n        });\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        if (!this.mouseDown) return;\n\n        if (this.mouseDownStickerId !== stickerId) {\n            this.mouseDownStickerId = null;\n        }\n        this.setState({ previewStickerId: stickerId });\n        this.loadPreviewContent(stickerId);\n\n        const { onPreview } = this.props;\n        const { recent, sets } = this.state;\n\n        const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n        onPreview(sticker);\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true }, () => {\n                    const { onPreview } = this.props;\n                    const { recent, sets } = this.state;\n\n                    const sticker = getStickers([recent].concat(sets)).find(x => x.sticker.id === stickerId);\n                    onPreview(sticker);\n                });\n            }\n        }, 500);\n\n        this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n\n        const { onPreview } = this.props;\n\n        onPreview(null);\n\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    handleStickerSelect = sticker => {\n        const { onSelect } = this.props;\n        const { cancelSend } = this.state;\n\n        if (cancelSend) return;\n\n        onSelect(sticker);\n    };\n\n    handleSelectSet = async position => {\n        const { sets, stickerSets } = this.state;\n        const { scrollRef } = this;\n\n        if (position < sets.length) {\n            const element = this.itemsMap.get(sets[position].id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    const scroll = scrollRef.current;\n                    scroll.scrollTop = node.offsetTop;\n                }\n            }\n        } else if (position < stickerSets.sets.length) {\n            if (this.loadingChunk) return;\n            if (stickerSets.sets.length === sets.length) return;\n\n            this.loadingChunk = true;\n            const promises = [];\n            stickerSets.sets.slice(this.setsLength, position + 1).forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\n\n            this.setsLength += result.length;\n            let concatSets = sets.concat(result);\n            this.setState({ sets: concatSets }, () => {\n                if (position < concatSets.length) {\n                    this.handleSelectSet(position);\n                }\n            });\n        }\n    };\n\n    handleDeleteRecent = () => {\n        TdLibController.send({\n            '@type': 'clearRecentStickers',\n            is_attached: false\n        });\n    };\n\n    handleDeleteStickerSet = id => {\n        TdLibController.send({\n            '@type': 'changeStickerSet',\n            set_id: id,\n            is_installed: false\n        });\n    };\n\n    render() {\n        const { t } = this.props;\n        const { recent, stickerSets, sets, headerStickers } = this.state;\n        // console.log('[sp] render', recent, stickerSets, sets);\n        // if (!stickerSets) return null;\n        //\n        // if (!sets) return null;\n        // if (!sets.length) return null;\n\n        this.itemsMap.clear();\n        const items = sets.map(x => (\n            <StickerSet\n                key={x.id}\n                ref={el => this.itemsMap.set(x.id, el)}\n                info={x}\n                onSelect={this.handleStickerSelect}\n                onMouseDown={this.handleMouseDown}\n                onMouseEnter={this.handleMouseEnter}\n            />\n        ));\n\n        const recentInfo =\n            recent && recent.stickers.length > 0\n                ? {\n                      stickers: recent.stickers,\n                      title: t('RecentStickers')\n                  }\n                : null;\n\n        return (\n            <div className='stickers-picker'>\n                <h3>Sticker Picker</h3>\n                <StickersPickerHeader onSelect={this.handleSelectSet} stickers={headerStickers} />\n                <div ref={this.scrollRef} className='stickers-picker-scroll' onScroll={this.handleScroll}>\n                    {Boolean(recentInfo) && (\n                        <StickerSet\n                            info={recentInfo}\n                            onSelect={this.handleStickerSelect}\n                            onMouseDown={this.handleMouseDown}\n                            onMouseEnter={this.handleMouseEnter}\n                            onDeleteClick={this.handleDeleteRecent}\n                        />\n                    )}\n                    {items}\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onPreview: PropTypes.func.isRequired\n};\n\nconst enhance = compose(\n    withSaveRef(),\n    withTranslation(),\n    withRestoreRef()\n);\n\nexport default enhance(StickersPicker);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '../../Assets/Icons/Smile';\nimport { Picker as EmojiPicker } from 'emoji-mart';\nimport StickerPreview from './StickerPreview';\nimport StickersPicker from './StickersPicker';\nimport { isAppleDevice } from '../../Utils/Common';\nimport { loadStickerThumbnailContent, loadStickerSetContent, loadRecentStickersContent } from '../../Utils/File';\nimport { EMOJI_PICKER_TIMEOUT_MS } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\n\nconst styles = theme => ({\n    pickerRoot: {\n        zIndex: theme.zIndex.modal,\n        width: 338,\n        overflowX: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.text.primary,\n        borderRadius: theme.shape.borderRadius,\n        boxShadow: theme.shadows[8],\n        position: 'absolute',\n        bottom: 54,\n        display: 'none'\n    },\n    pickerRootOpened: {\n        display: 'block'\n    }\n});\n\nclass EmojiPickerButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            tab: 0\n        };\n\n        this.emojiPickerRef = React.createRef();\n        this.stickersPickerRef = React.createRef();\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.off('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.off('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    onClientUpdateChange = update => {\n        this.picker = null;\n    };\n\n    handleButtonMouseEnter = event => {\n        this.buttonEnter = true;\n        setTimeout(() => {\n            if (!this.buttonEnter) return;\n\n            this.updatePicker(true);\n            this.loadStickerSets();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    loadStickerSets = async () => {\n        if (this.sets) return;\n\n        this.recent = await TdLibController.send({\n            '@type': 'getRecentStickers',\n            is_attached: false\n        });\n\n        this.stickerSets = await TdLibController.send({\n            '@type': 'getInstalledStickerSets',\n            is_masks: false\n        });\n\n        const promises = [];\n        this.stickerSets.sets.forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        this.sets = await Promise.all(promises);\n\n        const node = this.stickersPickerRef.current;\n\n        const store = FileStore.getStore();\n        loadRecentStickersContent(store, this.recent);\n\n        const previewSets = this.sets.slice(0, 5).reverse();\n        previewSets.forEach(x => {\n            loadStickerSetContent(store, x);\n            node.loadedSets.set(x.id, x.id);\n        });\n\n        const previewStickers = this.sets.reduce((stickers, set) => {\n            if (set.stickers.length > 0) {\n                stickers.push(set.stickers[0]);\n            }\n            return stickers;\n        }, []);\n        previewStickers.forEach(x => {\n            loadStickerThumbnailContent(store, x);\n        });\n    };\n\n    handleButtonMouseLeave = () => {\n        this.buttonEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    tryClosePicker = () => {\n        const { sticker } = this.state;\n        if (this.paperEnter || this.buttonEnter || sticker) return;\n\n        this.updatePicker(false);\n    };\n\n    handlePaperMouseEnter = () => {\n        this.paperEnter = true;\n    };\n\n    handlePaperMouseLeave = () => {\n        // return;\n\n        this.paperEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    updatePicker = open => {\n        this.setState({ open });\n    };\n\n    handleEmojiClick = () => {\n        this.setState({ tab: 0 });\n    };\n\n    handleStickersClick = () => {\n        const stickersPicker = this.stickersPickerRef.current;\n        const { tab } = this.state;\n\n        stickersPicker.loadContent(this.recent, this.stickerSets, this.sets);\n\n        this.setState({ tab: 1 });\n        if (tab === 1) {\n            stickersPicker.scrollTop();\n        }\n    };\n\n    handleStickerSend = sticker => {\n        if (!sticker) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSend',\n            sticker\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleStickerPreview = sticker => {\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n\n        if (!sticker) {\n            this.tryClosePicker();\n        }\n    };\n\n    render() {\n        const { classes, theme, t } = this.props;\n        const { open, tab, sticker } = this.state;\n\n        if (open && !this.picker) {\n            const i18n = {\n                search: t('Search'),\n                notfound: t('NotEmojiFound'),\n                skintext: t('ChooseDefaultSkinTone'),\n                categories: {\n                    search: t('SearchResults'),\n                    recent: t('Recent'),\n                    people: t('SmileysPeople'),\n                    nature: t('AnimalsNature'),\n                    foods: t('FoodDrink'),\n                    activity: t('Activity'),\n                    places: t('TravelPlaces'),\n                    objects: t('Objects'),\n                    symbols: t('Symbols'),\n                    flags: t('Flags'),\n                    custom: t('Custom')\n                }\n            };\n\n            this.picker = (\n                <EmojiPicker\n                    ref={this.emojiPickerRef}\n                    set='apple'\n                    showPreview={false}\n                    showSkinTones={false}\n                    onSelect={this.props.onSelect}\n                    color={theme.palette.primary.dark}\n                    i18n={i18n}\n                    native={isAppleDevice()}\n                    style={{ width: 338, overflowX: 'hidden' }}\n                />\n            );\n\n            this.stickersPicker = (\n                <StickersPicker\n                    ref={this.stickersPickerRef}\n                    onSelect={this.handleStickerSend}\n                    onPreview={this.handleStickerPreview}\n                />\n            );\n        }\n\n        return (\n            <>\n                <link\n                    rel='stylesheet'\n                    type='text/css'\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\n                />\n                <IconButton\n                    className='inputbox-icon-button'\n                    aria-label='Emoticon'\n                    onMouseEnter={this.handleButtonMouseEnter}\n                    onMouseLeave={this.handleButtonMouseLeave}>\n                    <InsertEmoticonIcon />\n                </IconButton>\n                <div\n                    className={classNames(classes.pickerRoot, { [classes.pickerRootOpened]: open })}\n                    onMouseEnter={this.handlePaperMouseEnter}\n                    onMouseLeave={this.handlePaperMouseLeave}>\n                    <div className='emoji-picker-header'>\n                        <Button\n                            color={tab === 0 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleEmojiClick}>\n                            {t('Emoji')}\n                        </Button>\n                        <Button\n                            color={tab === 1 ? 'primary' : 'default'}\n                            className='emoji-picker-header-button'\n                            onClick={this.handleStickersClick}>\n                            {t('Stickers')}\n                        </Button>\n                    </div>\n                    <div className={classNames('emoji-picker-content', { 'emoji-picker-content-stickers': tab === 1 })}>\n                        {this.picker}\n                        {this.stickersPicker}\n                    </div>\n                    {Boolean(sticker) && <StickerPreview sticker={sticker} />}\n                </div>\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withStyles(styles, { withTheme: true }),\n    withTranslation()\n);\n\nexport default enhance(EmojiPickerButton);\n"],"sourceRoot":""}